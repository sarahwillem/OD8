{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: Full node entity.
 *   - id: The node ID.
 *   - bundle: The type of the node, for example, "page" or "article".
 *   - authorid: The user ID of the node author.
 *   - createdtime: Time the node was published formatted in Unix timestamp.
 *   - changedtime: Time the node was changed formatted in Unix timestamp.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{# Most of the content in this template is the same as the original Classy
   template. See core/themes/classy/templates/content/node.html.twig.

   The comment at the top of the file details all of the variables available in
   this template. The comments below detail various parts of Twig functionality,
   and additional API functions and concepts created specifically by Drupal.
#}

{# Below is an array of CSS class names used for the <article> tag that wraps a
   node. We retrive the name of the content type from node.bundle. The name is
   then passed through the clean_class filter to make sure its format is
   acceptable for a CSS class name. For example, spaces are converted into
   hyphens.

   The node class has various methods for determining properties of the node.
   Some, like isPromoted, isSticky, isPublished, are shown below. Each is used
   with a ternary operator to determine whether the associate class should be
   added. You can read them as follows:

   node.isPromoted() ? 'node--promoted'
   if node.isPromoted returns true, add the value 'node--promoted.' If the
   node is not promotoed to front page, 'node--promoted' would not be added.

   You can provide a value for when isPromoted retuns false by using a colon to
   separate the values. For example:

   node.isPromoted() ? 'node--promoted' : 'node--not-promoted'
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{# attach_library is a Drupal function used to attach the specified library
   when the template is used. In this case, Classy's node library is attached
   whenever this template is used. See core/themes/classy/classy.libraries.yml.
#}
{{ attach_library('classy/node') }}

{# Attributes is a special object created by Drupal that contains all the HTML
   attributes that will be printed with the <article> tag. The CSS classes
   created above are added to the class attribute by using the addClass method.

   All of the following are valid: (assuming 'classes' is a variable containing
   a string class name or array of class names)
   addClass(classes)
   addClass(classes, 'and-another-class')
   addClass('custom-1', 'custom-2', 'custom-3')

   Drupal also has removeClass to remove unwanted classes that may come from
   outside this template, and hasClass to check for the existance of a class.
#}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {# The variable 'pistachio' was created by the pistachio_preprocess_node()
     function in the pistachio.theme file.
   #}
  {% if (pistachio == 'super awesome') %}
    <p>Pistachio is Super Awesome!</p>
  {% endif %}

  {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {# trans is Twig's translation filter. In Drupal's implementation, this
           will be sent to t() to be translated.
        #}
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('node__content') }}>
    {{ content }}
  </div>

</article>
